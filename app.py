import re

class CreditCardValidator:
    """Classe para validar n√∫meros de cart√£o de cr√©dito e identificar bandeiras"""
    
    def __init__(self):
        # Padr√µes para identificar cada bandeira
        self.card_patterns = {
            'Visa': r'^4[0-9]{12}(?:[0-9]{3})?$',
            'MasterCard': r'^5[1-5][0-9]{14}$|^2[2-7][0-9]{14}$',
            'American Express': r'^3[47][0-9]{13}$',
            'Diners Club': r'^3[0689][0-9]{11}$|^54[0-9]{14}$|^55[0-9]{14}$',
            'Discover': r'^6(?:011|5[0-9]{2})[0-9]{12}$',
            'enRoute': r'^2(?:014|149)[0-9]{11}$',
            'JCB': r'^(?:2131|1800|35\d{3})\d{11}$',
            'Voyager': r'^8699[0-9]{11}$',
            'HiperCard': r'^(?:606282\d{10}(\d{3})?|3841\d{15})$',
            'Aura': r'^50[0-9]{14}$'
        }
    
    def clean_card_number(self, card_number):
        """Remove espa√ßos, h√≠fens e outros caracteres n√£o num√©ricos"""
        return re.sub(r'[^0-9]', '', str(card_number))
    
    def luhn_algorithm(self, card_number):
        """Implementa o algoritmo de Luhn para validar o n√∫mero do cart√£o"""
        def digits_of(number):
            return [int(d) for d in str(number)]
        
        digits = digits_of(card_number)
        odd_digits = digits[-1::-2]
        even_digits = digits[-2::-2]
        
        checksum = sum(odd_digits)
        for digit in even_digits:
            checksum += sum(digits_of(digit * 2))
        
        return checksum % 10 == 0
    
    def identify_card_brand(self, card_number):
        """Identifica a bandeira do cart√£o baseado no n√∫mero"""
        clean_number = self.clean_card_number(card_number)
        
        for brand, pattern in self.card_patterns.items():
            if re.match(pattern, clean_number):
                return brand
        
        return "Bandeira n√£o identificada"
    
    def validate_card(self, card_number):
        """Valida o cart√£o de cr√©dito e retorna informa√ß√µes completas"""
        clean_number = self.clean_card_number(card_number)
        
        # Verifica se tem apenas d√≠gitos
        if not clean_number.isdigit():
            return {
                'valid': False,
                'brand': None,
                'error': 'N√∫mero deve conter apenas d√≠gitos'
            }
        
        # Verifica comprimento m√≠nimo
        if len(clean_number) < 13 or len(clean_number) > 19:
            return {
                'valid': False,
                'brand': None,
                'error': 'N√∫mero deve ter entre 13 e 19 d√≠gitos'
            }
        
        # Identifica a bandeira
        brand = self.identify_card_brand(clean_number)
        
        # Valida usando algoritmo de Luhn
        is_luhn_valid = self.luhn_algorithm(clean_number)
        
        return {
            'valid': is_luhn_valid and brand != "Bandeira n√£o identificada",
            'brand': brand if brand != "Bandeira n√£o identificada" else None,
            'luhn_valid': is_luhn_valid,
            'error': None if is_luhn_valid and brand != "Bandeira n√£o identificada" else 
                    'N√∫mero inv√°lido pelo algoritmo de Luhn' if not is_luhn_valid else 
                    'Bandeira n√£o suportada'
        }

def main():
    """Fun√ß√£o principal para intera√ß√£o com o usu√°rio"""
    validator = CreditCardValidator()
    
    print("=" * 50)
    print("     VALIDADOR DE CART√ÉO DE CR√âDITO")
    print("=" * 50)
    print("\nBandeiras suportadas:")
    print("‚Ä¢ Visa")
    print("‚Ä¢ MasterCard")
    print("‚Ä¢ American Express")
    print("‚Ä¢ Diners Club")
    print("‚Ä¢ Discover")
    print("‚Ä¢ enRoute")
    print("‚Ä¢ JCB")
    print("‚Ä¢ Voyager")
    print("‚Ä¢ HiperCard")
    print("‚Ä¢ Aura")
    print("\n" + "=" * 50)
    
    while True:
        print("\nDigite o n√∫mero do cart√£o de cr√©dito (ou 'sair' para encerrar):")
        card_input = input("N√∫mero: ").strip()
        
        if card_input.lower() in ['sair', 'exit', 'quit']:
            print("Encerrando o programa...")
            break
        
        if not card_input:
            print("‚ùå Por favor, digite um n√∫mero v√°lido.")
            continue
        
        # Valida o cart√£o
        result = validator.validate_card(card_input)
        
        print("\n" + "-" * 40)
        print("RESULTADO DA VALIDA√á√ÉO:")
        print("-" * 40)
        
        if result['valid']:
            print(f"‚úÖ Cart√£o V√ÅLIDO")
            print(f"üè∑Ô∏è  Bandeira: {result['brand']}")
        else:
            print(f"‚ùå Cart√£o INV√ÅLIDO")
            if result['brand']:
                print(f"üè∑Ô∏è  Bandeira identificada: {result['brand']}")
            if result['error']:
                print(f"‚ùó Erro: {result['error']}")
        
        print(f"üîç Valida√ß√£o Luhn: {'‚úÖ Passou' if result['luhn_valid'] else '‚ùå Falhou'}")
        print("-" * 40)

def test_cards():
    """Fun√ß√£o para testar com n√∫meros de exemplo"""
    validator = CreditCardValidator()
    
    # N√∫meros de teste (alguns v√°lidos pelo algoritmo de Luhn)
    test_numbers = [
        "4532015112830366",  # Visa
        "5555555555554444",  # MasterCard
        "378282246310005",   # American Express
        "30569309025904",    # Diners Club
        "6011111111111117",  # Discover
        "4111111111111111",  # Visa
        "5105105105105100",  # MasterCard
    ]
    
    print("\n" + "=" * 50)
    print("     TESTE COM N√öMEROS DE EXEMPLO")
    print("=" * 50)
    
    for card in test_numbers:
        result = validator.validate_card(card)
        status = "‚úÖ V√ÅLIDO" if result['valid'] else "‚ùå INV√ÅLIDO"
        brand = result['brand'] if result['brand'] else "N√£o identificada"
        print(f"Cart√£o: {card}")
        print(f"Status: {status} | Bandeira: {brand}")
        print("-" * 30)

if __name__ == "__main__":
    # Pergunta se o usu√°rio quer executar testes ou valida√ß√£o interativa
    print("Escolha uma op√ß√£o:")
    print("1 - Valida√ß√£o interativa")
    print("2 - Executar testes com n√∫meros de exemplo")
    
    choice = input("Digite sua escolha (1 ou 2): ").strip()
    
    if choice == "2":
        test_cards()
    else:
        main()